
#--------------------#
# Personal Variables #
#--------------------#


#--------------#
#    Path      #
#--------------#

case $1 in
    'icmbpriv20')
	export PATH=${PATH}:~/Store/bin:/opt/bin
	;;
    @('cosmopc14'|'pit4'))
      # Color used in PS1
      export     good="$(tput setaf 80 )" # Works also as compname color
      export      bad="$(tput setaf 196)"
      export    white="\[$(tput setaf 255)\]"
      export   struct="\[$(tput setaf 27 )\]"
      export     time="\[$(tput setaf 247)\]"
      export username="\[$(tput setaf 42 )\]"
      export currentw="\[$(tput setaf 204)\]"
      export       at="\[$(tput setaf 220)\]"
      export historyn="\[$(tput setaf 220)\]"
      export timesec=18000      # time after which git do a remote update
	;;
    *)
	;;
esac

export reset="\[$(tput sgr0)\]"

#------------#
#   Prompt   #
#------------#

export reset_=$(tput sgr0)
function exitstatus() {
  if [[ $? == 0 ]]; then
    echo "${good}"
  else
    echo "${bad}"
  fi
}

function git_color(){
  local EXIT=$?
  local ERR=0
  local commit=$(tput setaf 160)
  local clean=$(tput setaf 120)
  local push=$(tput setaf 184)
  local pull=$(tput setaf 166)
  local default=$(tput setaf 249)

  local fetch_need=0
  status=$(git status 2>/dev/null); let ERR+=$?

  # To disable automatic fetching, uncomment the following line
  # export DISABLE_AUTOMATIC_FETCHING=0
  if [[ ! "$DISABLE_AUTOMATIC_FETCHING" ]]; then
    if [[ ! -f '.riccardo_fetch' ]]; then
      fetch_need=1
    else
      fetch_need=$(( (`date +%s` - `stat -L --format %Y '.riccardo_fetch'`) > ${timesec} ))
    fi

    if [[ -d ".git" &&  $fetch_need -eq 1 ]]; then
      >&2 echo -e "More than 5h from last fetch!\nFetching now..."
      git remote update &> /dev/null &&  >&2 echo "...Done!" || echo "This command never fail!"
      touch .riccardo_fetch
    fi
  fi

  if [[ $ERR -gt 0 ]]; then
    return $EXIT
  fi

  if [[ ! $status =~ "working directory clean" &&
        ! $status =~ "working tree clean" ]]; then
    echo ${commit}
    return $EXIT
  elif [[ $status =~ "have diverged"  ||
          $status =~ "is behind" ]]; then
    echo ${pull}
    return $EXIT
  elif [[ $status =~ "Your branch is ahead of" ]]; then
    echo ${push}
    return $EXIT
  elif [[ $status =~ "nothing to commit" ]]; then
    echo ${clean}
    return $EXIT
  else
    echo ${default}
    return $EXIT
  fi
}

function git_string(){
  local EXIT=$?
  local ERR=0
  local on_branch="On branch ([^${IFS}]*)"
  local on_commit="HEAD detached at ([^${IFS}]*)"
  git_status=$(git status 2>/dev/null); let ERR+=$?

  if [[ $ERR -ne 0 ]]; then
    return $EXIT
  fi

  if [[ $git_status =~ ${on_branch} ]]; then
    echo ${BASH_REMATCH[1]}
    return $EXIT
  elif [[ $git_status =~ ${on_commit} ]]; then
    echo ${BASH_REMATCH[1]}
    return $EXIT
  fi
}


export PS1="${struct}┌─[${time}\A${struct}]─[${currentw}\w${struct}]\n${struct}└─[\[\$(git_color)\]\$(git_string)${struct}]─[${username}\u${at}@\[\$(exitstatus)\]\h${struct}>${reset} "

export PS2="${struct}└─>${reset}"


#--------------#
#   Editor     #
#--------------#
  export EDITOR=/usr/bin/nano


#------------#
#   Colors   #
#------------#
# Since the colors shown depend on many things,
# just run bash_color_map to get all the colors you may
# want to see.

function color(){
  for c; do
    printf ' \e[48;5;%dm%03d ' $c $c
  done
  printf '\e[0m \n'
}

function bash_color_map() {
  # IFS=$' \t\n'
  # color {0..15}
  # for ((i=0;i<6;i++)); do
  #   color $(seq $((i*36+16)) $((i*36+51)))
  # done
  # color {232..255}

  for C in {0..255}; do
    tput setab $C
    echo -n "$C "
  done
  tput sgr0
  for C in {0..255}; do
    tput setaf $C
    echo -n "$C "
  done
  tput sgr0
  echo

}
