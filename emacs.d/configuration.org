#+TITLE: Emacs Configuration

* REQUIREMENTS
** GIT
   Remember to do:
   $git submodule init
   $git submodule sync
   $git submodule update

** Debian packages:
*** emacs-goodies-el
    - protbuffer
*** paredit-el
    - paredit mode

* Set personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Riccardo Petraglia"
        user-mail-address "riccardo.petraglia@gmail.com"
        calendar-latitude 46
        calendar-longitude 6
        calendar-location-name "Zurich, CH")
#+END_SRC

* Load general settings
** Load-paths
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/elisp")
   #+END_SRC
** Setting =package.el=
   Add =melpa= and initialize
   #+BEGIN_SRC emacs-lisp
     (when (>= emacs-major-version 24)
         (require 'package)
         (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
         (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
         (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t)
         (add-to-list 'package-archives '("org-mode" . "http://orgmode/elpa/") t)
         (package-initialize))

     (unless package-archive-contents
         (package-refresh-contents))
   #+END_SRC

*** Function to easily install packages
   #+BEGIN_SRC emacs-lisp
     (defun ensure-package-installed (&rest packages)
       "Assure every package is installed, ask for installation if it’s not.

     Return a list of installed packages or nil for every skipped package."
       (mapcar
        (lambda (package)
          ;; (package-installed-p 'evil)
          (if (package-installed-p package)
              nil
            (if (y-or-n-p (format "Package %s is missing. Install it? " package))
                (package-install package)
                (package-initialize)
              package)))
        packages))

     ;; make sure to have downloaded archive description.
     ;; Or use package-archive-contents as suggested by Nicolas Dudebout
     (or (file-exists-p package-user-dir)
         (package-refresh-contents))

   #+END_SRC

** Simplify answers
 #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
 #+END_SRC

** Hide certain modes from modeline
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'diminish)
       (package-install 'diminish))

     (defmacro diminish-minor-mode (filename mode &optional abbrev)
       `(eval-after-load (symbol-name ,filename)
          '(diminish ,mode ,abbrev)))

     (defmacro diminish-major-mode (mode-hook abbrev)
       `(add-hook ,mode-hook
                  (lambda ()
                    (setq mode-name ,abbrev))))

     (diminish-minor-mode 'abbrev 'abbrev-mode)
     (diminish-minor-mode 'company 'company-mode)
     (diminish-minor-mode 'eldoc 'eldoc-mode)
     (diminish-minor-mode 'flycheck 'flycheck-mode)
     (diminish-minor-mode 'flyspell 'flyspell-mode)
     (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
     (diminish-minor-mode 'projectile 'projectile-mode)
     (diminish-minor-mode 'yasnippet 'yas-minor-mode)
     (diminish-minor-mode 'wrap-region 'wrap-region-mode)
     (diminish-minor-mode 'autorevert 'auto-revert-mode)
     (diminish-minor-mode 'paredit 'paredit-mode "[)")
     (diminish-major-mode 'emacs-lisp-mode-hook "e()")
     (diminish-major-mode 'haskell-mode-hook "λ=")
     (diminish-major-mode 'lisp-interaction-mode-hook "λ")
     (diminish-major-mode 'python-mode-hook " π")
   #+END_SRC

** Some more keybindings
   - =M-o= → switch window
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-o")
                      'other-window)
   #+END_SRC

** Load env-variables from bashrc
   Using the =exec-path-from-shell= package should allow to easily
   load variables defined in the bashrc even when emacs is opened
   throught the graphical interface.
   [[https://github.com/purcell/exec-path-from-shell][Credits]]
*** Install the package
    #+BEGIN_SRC emacs-lisp
      (ensure-package-installed 'exec-path-from-shell)

      ;; Set the pythonpath too
      (exec-path-from-shell-copy-env "PYTHONPATH")

      ;; Initialize everything
      (when (memq window-system '(mac ns x))
        (exec-path-from-shell-initialize))
    #+END_SRC

** Install =dash=
   [[https://github.com/magnars/dash.el][Dash]] is a useful elisp allowing a better management of lists.
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'dash)
   #+END_SRC

** Install & Settings =yasnippet=
   Serve automatic snippet insertion.
   All the snippet are in =~/.dotfiles/emacs.d/snippets=

   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'yasnippet)
     (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
     (yas-global-mode 1)
   #+END_SRC

** Install & Settings =MAGIT=
   The best gui to git!
   *REMEMBER:* to be able to compile with the makefile set and export
   the value of =DASH_DIR= and =WITH_EDITOR_DIR= to the right absolute
   path. To use relative path remember that they must be relative to
   the =magit/lisp= directory and not to the =magit=.

   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'magit)
   #+END_SRC

*** Keybinds
    Map =<f6>= to invoke magit
    #+BEGIN_SRC emacs-lisp
      (define-key global-map (kbd "<f6>") 'magit-status)
    #+END_SRC

** Install & Settings =ido=
   Too nice! It allows the completion of many things in a convenient
   way!
   To make ido nice the following are needed too:
   - [[https://github.com/creichert/ido-vertical-mode.el][=ido-vertical-mode=]]
   - [[https://github.com/DarwinAwardWinner/ido-ubiquitous][=ido-ubiquitous=]]
   - [[https://github.com/lewang/flx][=flx=]]

   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'ido-ubiquitous 'flx 'flx-ido 'ido-vertical-mode)

     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)
     (ido-ubiquitous)
     (flx-ido-mode 1)              ; better/faster matching
     (setq ido-create-new-buffer 'always)    ; don't confirm to create new buffers
     (ido-vertical-mode 1)
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)
     (setq ido-auto-merge-work-directories-length -1)
   #+END_SRC

** Install & Settings =smex= (=ido= with =M-x=)
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'smex)

     (smex-initialize)
     (global-set-key (kbd "M-x") 'smex)
     (global-set-key (kbd "M-X") 'smex-major-mode-commands)
   #+END_SRC

   To still use the old =M-x= hit =C-c C-c M-x=
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
   #+END_SRC

** Load =proselint=
   [[http://proselint.com/][Proselint]] is a grammar checker. It would be extremely useful but
   the only way to install it now is going through =pip=. I will wait
   for a porting to debian...
*** TODO [#C] Install =proselint=

** Load =Emacs-wgrep=
   Allow modification on grep output and save the modifications on the
   right files. Use the same key as in dired to modify the output:
   - =C-x C-q= start edit
   - =C-c C-c= finish editing

   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'wgrep)

     (eval-after-load 'grep
       '(define-key grep-mode-map
              (kbd "C-x C-q")
               'wgrep-change-to-wgrep-mode))

     (eval-after-load 'wgrep
       '(define-key grep-mode-map
              (kbd "C-c C-c")
               'wgrep-finish-edit))


     (setq wgrep-auto-save-buffer t)
   #+END_SRC

** Install & Settings =projectile=
   Create a project environment. Look [[https://github.com/bbatsov/projectile][here]] for more details.
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'projectile)
     (projectile-global-mode)
   #+END_SRC

*** Load =persp-projectile=
    Allows management of multiple project within a single emacs
    To make [[https://github.com/bbatsov/persp-projectile][=persp-projectile=]] working, [[https://github.com/nex3/perspective-el][=perspective=]] is needed.

    Hit =C-x x p= to change between projects!
    #+BEGIN_SRC emacs-lisp
      (ensure-package-installed 'perspective 'persp-projectile)
      (persp-mode)
      (define-key projectile-mode-map (kbd "C-x x p") 'projectile-persp-switch-project)
    #+END_SRC

** Install & Settings =Bookmark+=
   [[https:www.emacswiki.org/emacs/BookmarkPlus#toc1][Credits & guide]]
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'bookmark+)
   #+END_SRC

** Install & Settings =company-mode=
   Company mode can be found [[http://company-mode.github.io/][here]].
   The following install it automatically
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'company 'company-quickhelp)
   #+END_SRC

   Use company everywhere on emacs!
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'global-company-mode)
     ;; Also load company-quickhelp
     (company-quickhelp-mode 1)
   #+END_SRC

   Add some default company-backend
   #+BEGIN_SRC emacs-lisp
     (setq company-backends
           '((company-files                ;files and directory
              company-keywords             ;keywords
              company-capf
              company-yasnippet)
             (company-abbrev company-dabbrev)))
   #+END_SRC

   I do not want to wait for completion
   #+BEGIN_SRC emacs-lisp
     (setq company-idle-delay 0)
   #+END_SRC

** Install & Settings =flycheck=
   Useful to check syntax on many languages
   *Rely on other software installed on the machine*
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'flycheck 'flycheck-pos-tip 'flycheck-color-mode-line)
   #+END_SRC

*** Use it globally
    And load also the addons
    #+BEGIN_SRC emacs-lisp
      (add-hook 'after-init-hook #'global-flycheck-mode)

      ;; make the mode line unreadeble
      ;; (eval-after-load "flycheck"
      ;;     '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))

      (with-eval-after-load 'flycheck
          (flycheck-pos-tip-mode)
          )
    #+END_SRC

*** Set when checking the file
    #+BEGIN_SRC emacs-lisp
      (setq flycheck-check-syntax-automatically '(mode-enabled save newline idle-change))
      (setq flycheck-idle-change-delay 2)
    #+END_SRC

** COMMENT Install & Settings =ipython-notebook=
   #+BEGIN_SRC emacs-lisp
     ;; (unless (package-installed-p 'ein)
     ;;   (package-install 'ein))
     ;; (unless (package-installed-p 'ein-mumamo)
     ;;   (package-install 'ein-mumamo))
   #+END_SRC
*** Load jedi integration
    #+BEGIN_SRC emacs-lisp
    ;; (add-hook 'ein:connect-mode-hook 'ein:jedi-setup)
    #+END_SRC

** Settings =show-paren-mode=
   This mode provide function that facilitates the understanding
   of parenthesis through highlighting the matching one.
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC

   Set the color of the highlighting
   #+BEGIN_SRC emacs-lisp
     '(show-paren-match ((((class color) (background light)) (:background "cyan4"))))
   #+END_SRC

** Install & Settings =SX=
   #+BEGIN_SRC emacs-lisp
     ;; (setq package-list '(sx))

     ;;   (unless (package-installed-p 'sx)
     ;;     (package-install 'sx))
   #+END_SRC

** Install & Settings =reainbow-delimiter=
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'rainbow-delimiters)
   #+END_SRC
   
* Utility functions
** Kill current buffer
   #+BEGIN_SRC emacs-lisp
   (defun myf/kill-current-buffer ()
     "Kill the current buffer without prompting."
     (interactive)
     (kill-buffer (current-buffer)))
   #+END_SRC

** Comment/uncomment smarter
   #+BEGIN_SRC emacs-lisp
   (defun myf/comment-or-uncomment-region-or-line ()
     "Comments or uncomments the region or the current line if there's no active region."
     (interactive)
     (let (beg end)
       (if (region-active-p)
           (setq beg (region-beginning) end (region-end))
         (setq beg (line-beginning-position) end (line-end-position)))
       (comment-or-uncomment-region beg end)))
   #+END_SRC

** Defining configs for many modes
*** Useful in many programming modes
	- =C-c M-;= comment the line if region is not selected
	- Use spaces instead of tabs (apparently do not create problems in
      =GNUMake-mode=

	#+BEGIN_SRC emacs-lisp
      (defun prog-mode-config ()
        "For use in many programming mode-hook."
        (local-set-key (kbd "C-c M-;") 'myf/comment-or-uncomment-region-or-line)
        (setq-default indent-tabs-mode nil))
	#+END_SRC

*** Useful in many text modes
    - Use spaces instead of tabs

    #+BEGIN_SRC emacs-lisp
      (defun text-mode-config ()
        "For use in many text mode-hook."
        (setq-default indent-tabs-mode nil))
    #+END_SRC

** Highlight uncommited changes
   Require the =diff-hl=. [[https://github.com/dgutov/diff-hl/][Here]] the git repo.
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'company 'diff-hl)
   #+END_SRC

** Auto-entry =auto-mode-alist=
   #+BEGIN_SRC emacs-lisp
     (defun myf/add-auto-mode (mode &rest patterns)
       "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
       (dolist (pattern patterns)
         (add-to-list 'auto-mode-alist (cons pattern mode))))
   #+END_SRC
** Switch when opening other buffers
   #+BEGIN_SRC emacs-lisp
     (defun hrs/split-window-below-and-switch ()
       "Split the window horizontally, then switch to the new pane."
       (interactive)
       (split-window-below)
       (other-window 1))

     (defun hrs/split-window-right-and-switch ()
       "Split the window vertically, then switch to the new pane."
       (interactive)
       (split-window-right)
       (other-window 1))
   #+END_SRC

   Always switch when manually opening a new windows
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x 2")
                     'hrs/split-window-below-and-switch)

     (global-set-key (kbd "C-x 3")
                     'hrs/split-window-right-and-switch)
   #+END_SRC

* UI Preferences
** The theme (Material)
   [[https://github.com/cpaulik/emacs-material-theme][Credits]]
*** Load the theme

   #+BEGIN_SRC emacs-lisp
     ;; Load Material
     (add-to-list 'load-path "~/.emacs.d/themes/emacs-material-theme")
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/emacs-material-theme")
     ;; Load Solarized
     (add-to-list 'load-path "~/.emacs.d/themes/emacs-color-theme-solarized")
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/emacs-color-theme-solarized")
     ;; Load hc-zenburn
     (add-to-list 'load-path "~/.emacs.d/themes/hc-zenburn-emacs")
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/hc-zenburn-emacs")
     ;; Load zenburn
     (add-to-list 'load-path "~/.emacs.d/themes/zenburn-emacs")
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/zenburn-emacs")
     ;; Load tomorrow...
     (add-to-list 'load-path "~/.emacs.d/themes/tomorrow-theme")
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/tomorrow-theme")



     ;; Eventually load a theme
     (load-theme 'tomorrow-night-bright t)

     ;; And also load a font
     (set-frame-font "Monaco-12")

   #+END_SRC

*** Set dark background always
    If want the theme in the terminal to be light, just change the
    last argument of =set-terminal-parameters= to "light". The same
    should work for the x11 framed vesion changing the value in the
    =set-frame-parameters=

    #+BEGIN_SRC emacs-lisp
            ;; (setq solarized-contrast 'high)
            ;; (setq solarized-visibility 'high)
            ;; (set-frame-parameter nil 'background-mode 'dark)
            ;; (set-terminal-parameter nil 'background-mode 'dark)
            ;; (enable-theme 'solarized)

            ;; Method 2
            ;; (add-hook 'after-make-frame-functions
            ;;                     (lambda (frame)
            ;;                       (let ((mode (if (display-graphic-p frame)
            ;;                                       'dark 'dark)))
            ;;                         (set-frame-parameter frame 'background-mode mode)
            ;;                         (set-terminal-parameter frame 'background-mode mode))
            ;;                       (enable-theme 'solarized)))

            ;;;
            ;; Using emacs --daemon and emacsclient I have often had cause to use emacs at the terminal,
            ;; but I like to have a colour scheme in my graphical frames that is unreadable in the console.
            ;; This code lives in my .emacs file and allows me to setup color and font settings for
            ;; graphical frames, but leave the console frames to use the default colour scheme.
            ;; I've found this very useful.  Tested with Emacs 24.0.50.1 @ 2010-20-07 -- Geoff Teale

      ;;       (defun setup-window-system-frame-colours (&rest frame)
      ;;         (if window-system
      ;;             (let ((f (if (car frame)
      ;;     		     (car frame)
      ;;     		   (selected-frame))))
      ;;     	  (progn
      ;; ;;    	    (set-frame-font "Bera Sans Mono-11")
      ;;     	    (set-face-background 'default "#cd0000" f)
      ;;     	    (set-face-foreground 'default "#FFFFFF" f)
      ;;     	    (set-face-background 'fringe  "#000000" f)
      ;;     	    (set-face-background 'cursor "#2F4F4F" f)
      ;;     	    (set-face-background 'mode-line "#2F4F4F" f)
      ;;     	    (set-face-foreground 'mode-line "#BCBf91" f)))))

      ;;       (require 'server)
      ;;       (defadvice server-create-window-system-frame
      ;;         (after set-window-system-frame-colours ())
      ;;         "Set custom frame colours when creating the first frame on a display"
      ;;         (message "Running after frame-initialize")
      ;;         (setup-window-system-frame-colours))
      ;;       (ad-activate 'server-create-window-system-frame)
      ;;       (add-hook 'after-make-frame-functions 'setup-window-system-frame-colours t)
    #+END_SRC

** Highlight the current line
   =global-hl-line-mode= softly highlights the background color of the
   line containing point.
   #+BEGIN_SRC emacs-lisp
     (when window-system
       (global-hl-line-mode))
   #+END_SRC

** Smart Mode Line
   Nice and "smarter" than powerline
   [[https://github.com/Malabarba/smart-mode-line][Credits]]
*** Automatic installation from elpa
    #+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'smart-mode-line)
        (package-install 'smart-mode-line ))
    #+END_SRC

*** Use it everywhere
    #+BEGIN_SRC emacs-lisp
      (setq sml/no-confirm-load-theme t)
      (setq sml/theme 'respectful)
      (sml/setup)
    #+END_SRC

* dired
  Load up the assorted dired extensions
  - [[https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/dired%2B.el][=dired+=]]
    #+BEGIN_SRC emacs-lisp
      (load "dired-x")
      (ensure-package-installed 'dired+)
    #+END_SRC

  Always show details (the key =(= toggle this feature)
  #+BEGIN_SRC emacs-lisp
  (setq diredp-hide-details-initially-flag 'nil)
  (setq diredp-hide-details-propagate-flag 'nil)
  #+END_SRC

  Set the information to show in dired through the =ls= switches
  - =l=: Use the long listing format
  - =h=: Use human readable sizes
  - =v=: Sort numbers naturally
  - =A=: Almost all. Doesn't include "=.=" and "=..="

  #+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-lhva")
  #+END_SRC

  Always copy directory recursiverly instead of asking every time
  #+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always)
  #+END_SRC

  Ask before recursively /deleting/ a directory, though
  #+BEGIN_SRC emacs-lisp
  (setq dired-recursive-deletes 'top)
  #+END_SRC

** Use Omit Mode
   Set the file to omit with a regex
   #+BEGIN_SRC emacs-lisp
   (setq dired-omit-files "^\\..*\\|^#.*")
   #+END_SRC

   Load omit-mode always with dired
   #+BEGIN_SRC emacs-lisp
   (add-hook 'dired-mode-hook
             (lambda ()
	     (dired-omit-mode 1)
	     ))
   #+END_SRC

* Org-Mode (Configuration needs some check!)
  *REMEMBER:* org-mode needs to be loaded in the init.el file because
   is needed to parse this file!
** Customization
*** Customize TODO
    Set the sequence.
    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(p)" "WAITING(w@)" "|" "DONE(d)" "CANCELED(c@!)")))
    #+END_SRC

    Set the face
    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keyword-faces '(("TODO" . (:foreground "black" :background "red" :weight bold))
                                     ("INPROGRESS" . (:foreground "cyan"))
                                     ("WAITING" . (:foreground "black" :background "yellow" :weight bold))
                                     ("DONE" . (:foreground "green" :strike-through "black"))
                                     ("CANCELED" . (:foreground "dark-grey" :strike-through "black"))))

    #+END_SRC
*** Customize tags
    Set few most important.
    #+BEGIN_SRC emacs-lisp
      (setq org-tag-alist '((:startgroup . nil)
                            ("@work" . ?w)
                            ("@home" . ?h)
                            ("@phone". ?h)
                            (:endgroup . nil)
;                            (:newline . nil)
                            ;; (:startgroup . nil)
                            ;; ("teaching":newline .?t)
                            ;; ("classes":newline . ?c)
                            ;; ("seminars":newline . ?s)
                            ;; ("group-meeting":newline . ?g)
                            ;; (:endgroup . nil)
;                            (:newline . nil)
                            ("important" . ?i)))
    #+END_SRC

    Set the face only for the "important"
    #+BEGIN_SRC emacs-lisp
      (setq org-tag-faces '(("important" . (:foreground "red"  :weight bold))))
    #+END_SRC

*** Customize priorities
    Customize only faces
    #+BEGIN_SRC emacs-lisp
      (setq org-priority-faces '((?A . (:foreground "red" :weight bold))
                                 (?B . (:foreground "blue" :weight bold))
                                 (?C . (:foreground "green" :weight bold))))
    #+END_SRC

*** Customize Agenda
    Display agenda if I am not using emacs for 5 minutes
    #+BEGIN_SRC emacs-lisp

      (defun jump-to-org-agenda ()
        (interactive)
        (let ((buf (get-buffer "*Org Agenda*"))
              wind)
          (if buf
              (if (setq wind (get-buffer-window buf))
                  (select-window wind)
                (if (called-interactively-p)
                    (progn
                      (select-window (display-buffer buf t t))
                      (org-fit-window-to-buffer)
                      ;; (org-agenda-redo)
                      )
                  (with-selected-window (display-buffer buf)
                    (org-fit-window-to-buffer)
                    ;; (org-agenda-redo)
                    )))
            (call-interactively 'org-agenda-list)))
        ;;(let ((buf (get-buffer "*Calendar*")))
        ;;  (unless (get-buffer-window buf)
        ;;    (org-agenda-goto-calendar)))
        )

      ; Uncomment below to show agenda every 5 min
      ;; (run-with-idle-timer 300 t 'jump-to-org-agenda)
    #+END_SRC
** Display preferences
   Use nice bullets instead of asterisks.
   From [[.dotfiles/emacs.d/elisp/org-bullets][here]]
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/elisp/org-bullets")
   (require 'org-bullets)
   (add-hook 'org-mode-hook
	  (lambda ()
	    (org-bullets-mode t))
   (setq org-hide-leading-stars t))
   #+END_SRC

   Better than =...=
   #+BEGIN_SRC emacs-lisp
   (setq org-ellipsis " ↓ ")
   #+END_SRC

   Use syntax highlighting in source blocks while editing
   #+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
   #+END_SRC

   Make TAB act as if it were issued in a buffer of the language’s major mode.
   #+BEGIN_SRC emacs-lisp
   (setq org-src-tab-acts-natively t)
   #+END_SRC

** Task and org-capture management
*** Org files
    Store org-files in =~/Store/org-files=. The main file for the TODO
    stuff is the =~/Store/org-files/index.org=. Archive finished tasks in
    ~/Store/org-files/archive.org=.
    #+BEGIN_SRC emacs-lisp
    (setq org-directory "~/Store/org-files")
    (defun org-file-path (filename)
      "Return the absolute address of an org file, given its relative name."
      (concat (file-name-as-directory org-directory) filename))

    (setq org-index-file (org-file-path "index.org"))
    (setq org-archive-location
          (concat (org-file-path "archive/archive.org") "::* From %s"))
    #+END_SRC

*** Set Agenda files
    Set all the files in =~/Dropbox/org= will be used to build the
    agenda! Also this file and other .org in this directory should be
    used in the agenda...
    #+BEGIN_SRC emacs-lisp
    (setq org-agenda-files '("~/Store/org-files"))
    #+END_SRC

*** Archive when done
    Use =C-c C-x C-s= to mark a todo as done and move it in an
    appropriate place in the archive
    #+BEGIN_SRC emacs-lisp
    (defun mark-done-and-archive ()
      "Mark the state of an org-mode item as DONE and archive it."
      (interactive)
      (org-todo 'done)
      (org-archive-subtree))

    (define-key global-map (kbd "C-c C-x C-s") 'mark-done-and-archive)
    #+END_SRC

    Also record the archived time
    #+BEGIN_SRC emacs-lisp
    (setq org-log-done 'time)
    #+END_SRC

*** Capturing tasks
    Always add the property CREATED
    [[https://gist.github.com/mrvdb/4037694][Credits]]
    #+BEGIN_SRC emacs-lisp
      ;; Allow automatically handing of created/expired meta data.
      ;;
      (require 'org-expiry)
      ;; Configure it a bit to my liking
      (setq
        org-expiry-created-property-name "CREATED" ; Name of property when an item is created
        org-expiry-inactive-timestamps   t         ; Don't have everything in the agenda view
      )

      (defun mrb/insert-created-timestamp()
        "Insert a CREATED property using org-expiry.el for TODO entries"
        (org-expiry-insert-created)
        (org-back-to-heading)
        (org-end-of-line)
        (insert " ")
      )

      ;; Whenever a TODO entry is created, I want a timestamp
      ;; Advice org-insert-todo-heading to insert a created timestamp using org-expiry
      (defadvice org-insert-todo-heading (after mrb/created-timestamp-advice activate)
        "Insert a CREATED property using org-expiry.el for TODO entries"
        (mrb/insert-created-timestamp)
      )
      ;; Make it active
      (ad-activate 'org-insert-todo-heading)

      (require 'org-capture)

      (defadvice org-capture (after mrb/created-timestamp-advice activate)
        "Insert a CREATED property using org-expiry.el for TODO entries"
        ; Test if the captured entry is a TODO, if so insert the created
        ; timestamp property, otherwise ignore
        ;; (when (member (org-get-todo-state) org-todo-keywords-1)
        ;;   (mrb/insert-created-timestamp)))
        (mrb/insert-created-timestamp))
      (ad-activate 'org-capture)
    #+END_SRC


	Define few common tasks as capture templates.
	- Record Ideas in =~/Store/org-files/ideas.org=
	- Shopping list in =~/Store/org-files/shopping.org=
	- Simple TODO in =~/Store/org-files/index.org=

	#+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
        '(("i" "Ideas"
           entry
           (file (org-file-path "ideas.org"))
           "* %?\n")

          ("p" "Projects"
           entry
           (file (org-file-path "projects.org"))
           "* %?\n%^{EFFORT}p\n")

          ("s" "Shopping"
           checkitem
           (file (org-file-path "shopping.org")))

          ("j" "Journal"
           checkitem
           (file+datetree (org-file-path "til.org")))

          ("m" "Mail Todo"
           entry
           (file org-index-file)
           "* TODO %?\n\nFrom: %:from\nTo: %:to\nDate: %:date\nSubject: %a\n----------------\n%i----------------\n")

          ("t" "Todo"
           entry
           (file org-index-file)
           "* TODO %? %^{EFFORT}p\n")))
	#+END_SRC

    Last todo → first entry
    #+BEGIN_SRC emacs-lisp
      (setq org-reverse-note-order t)
    #+END_SRC

** Org-Gcal
*** Automatic installation from elpa of dependacies
    #+BEGIN_SRC emacs-lisp
      ;; (unless (package-installed-p 'alert)
      ;;   (package-install 'alert ))
      ;; (unless (package-installed-p 'request)
      ;;   (package-install 'request ))
      ;; (unless (package-installed-p 'deferred)
      ;;   (package-install 'deferred ))
      ;; (unless (package-installed-p 'request-deferred)
      ;;   (package-install 'request-deferred ))
      ;; (add-to-list 'load-path "~/.emacs.d/plugins/org-gcal.el")
      ;; (require 'org-gcal)
    #+END_SRC

*** Settings
    - project id: org-gcal-1347
    - client id:
      35643638683-giuot00muvo2lj0ufeflndq64jpn5u3n.apps.googleusercontent.com
    - client secret: cKjGhy6xwcvaEEMnQ0tjJ85r
    #+BEGIN_SRC emacs-lisp
      ;; (setq org-gcal-client-id "35643638683-giuot00muvo2lj0ufeflndq64jpn5u3n.apps.googleusercontent.com"
      ;;       org-gcal-client-secret "cKjGhy6xwcvaEEMnQ0tjJ85r"
      ;;       org-gcal-file-alist '(("hcna9ngg1k2ok87210ej0k7680@group.calendar.google.com" . "~/Store/org-files/work.org")
      ;;                             ("riccardo.petraglia@gmail.com" . "~/Store/org-files/personal.org")
      ;;                             ("urnlcsjuoca6m4iifjrsvpfp20@group.calendar.google.com" . "~/Store/org-files/EPFL.org")
      ;;                             ("vjmnq4rcjdcek5bk9qjeb5oun4@group.calendar.google.com" . "~/Store/org-files/important.org")
      ;;                             ("6edabonvog4la5mk5humn8fjmg@group.calendar.google.com" . "~/Store/org-files/OlgaRiccardo.org")))
    #+END_SRC

** Keybindings
   Few nice keys
   #+BEGIN_SRC emacs-lisp
   ; (define-key global-map (kbd "<f5>") 'org-store-link)
   (define-key global-map (kbd "<f5>") 'org-agenda)
   (define-key global-map (kbd "C-c c") 'org-capture)
   #+END_SRC

   Hit =C-c i= to quicly open up my todo list
   #+BEGIN_SRC emacs-lisp
   (defun open-index-file ()
     "Open the master org TODO list."
     (interactive)
     (find-file org-index-file)
     (flycheck-mode -1)
     (end-of-buffer))

    (global-set-key (kbd "C-c i") 'open-index-file)
	#+END_SRC

   Hit =M-n= to quickly open up a capture template for a new todo
   #+BEGIN_SRC emacs-lisp
   (defun org-capture-todo ()
     (interactive)
     (org-capture :keys "t"))

   (global-set-key (kbd "M-n") 'org-capture-todo)
   #+END_SRC

* Programming customization
** Let's always use 4 space when tabifying
    #+BEGIN_SRC emacs-lisp
    (setq-default tab-width 4)
    #+END_SRC

** Minor-modes to use in prog-derived modes
   - =prog-mode-config= -> defined above
   - =turn-on-diff-hl-mode= -> Show which lines are not committed
   - =rainbow-delimiters-mode= -> Colors the parentheses

   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'prog-mode-config)
     (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
     (add-hook 'prog-mode-hook 'which-function-mode)
   #+END_SRC

** LISPS
   All the lisps have some shared features, so we want to do the same
   things for all of them. That includes using =paredit-mode= to balance
   parentheses (and more!), =rainbow-delimiters= to color matching
   parentheses, and highlighting the whole expression when point is on
   a paren.

   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'paredit)
     (setq lispy-mode-hooks
           '(clojure-mode-hook
             emacs-lisp-mode-hook
         list-mode-hook
         scheme-mode-hook))

     (dolist (hook lispy-mode-hooks)
       (add-hook hook (lambda ()
                        (setq show-paren-style 'mixed)
                (paredit-mode))))
   #+END_SRC

   Use =eldoc-mode= when writing Emacs lisp

   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
     ;;(ensure-package-installed 'company 'eldoc-mode)
   #+END_SRC

** bash
   Let's try with 2 spaces indentation
   #+BEGIN_SRC emacs-lisp
   (add-hook 'sh-mode-hook
	  (lambda ()
	    (setq sh-basic-offset 2
		  sh-indentation 2)))
   #+END_SRC

** Python
   To get automatic completion under python let's use jedi with
   company.

*** Let's use the package-manager to install it
    #+BEGIN_SRC emacs-lisp
      (unless (ensure-package-installed 'company-jedi)
        (jedi:install-server))
    #+END_SRC

*** Define an hook config function
    #+BEGIN_SRC emacs-lisp
      (defun python-mode-config ()

        ;; Add company-jedi as a backend for company
        (add-to-list 'company-backends 'company-jedi)

        ;; Some keybinds
        (local-set-key (kbd "M-.")
                       'jedi:goto-definition)
        (local-set-key (kbd "M-,")
                       'jedi:goto-definition-pop-marker)
        (local-set-key (kbd "M-?")
                       'jedi:show-doc)
        (local-set-key (kbd "M-/")
                       'jedi:get-in-function-call)

        ;; Set tooltip method
        (setq jedi:tooltip-method '(pos-tip)))
    #+END_SRC

*** Configure jedi a little bit!
    [[http://emacslife.com/transcripts/2014-05-05%20Emacs%20as%20a%20Python%20IDE%20-%20Drew%20Werner%20-%20EmacsNYC.html#top][Credits]]

    - Define the =jedi-config:with-virtualenv= variable
      #+BEGIN_SRC emacs-lisp
        (defvar jedi-config:with-virtualenv nil
          "Set to non-nil to point to a particular virtualenv")
      #+END_SRC

    - Define variable that will help finding the project root
      #+BEGIN_SRC emacs-lisp
        (defvar jedi-config:vcs-root-sentinel ".git")
        (defvar jedi-config:python-module-sentinel "__init__.py")
      #+END_SRC

    - Function to find the project root given a buffer

      The following variable define which method will be used to find
      the project root. The variable can be one of =get-project-root=
      or =get-project-root-with-file=

      #+BEGIN_SRC emacs-lisp
        (defvar jedi-config:find-root-function
          'get-project-root-with-function)
      #+END_SRC


      - (Method 1: The directory containing the .git subdir)
        #+BEGIN_SRC emacs-lisp
          (defun get-project-root-with-function (buf repo-type init-file)
            (vc-find-root (expand-file-name (buffer-file-name buf))
                          repo-type))

        #+END_SRC

      - (Method 2: More robust - Taken from [[
][here]].)
        #+BEGIN_SRC emacs-lisp
          (defun get-project-root-with-file (buf repo-file &optional init-file)
            "Guesses that the python root is the less 'deep' of either:
                -- the root directory of the repository, or
                -- the directory before the first directory after the root
                   having the init-file file (e.g. __init__.py)"

            ;; make list of directories from root, removing empty
            (defun make-dir-list (path)
              (delq nil (mapcar (lambda (x)
                                  (and (not (string= x ""))
                                        x))
                                (split-string path "/"))))

            ;; convert a list of directories to a path starting at "/"
            (defun dir-list-to-path (dirs)
              (mapconcat 'identity (cons "" dirs)
                         "/"))

            ;; a little something to try to find the "best" root directory
            (defun try-find-best-root (base-dir buffer-dir current)
              (cond (base-dir ;; traverse until we reach the base
                     (try-find-best-root (cdr base-dir)
                                          (cdr buffer-dir)
                                          (append current (list (car buffer-dir)))))
                    (buffer-dir ;; try until we hit the current directory
                     (let* ((next-dir (append current (list (car buffer-dir))))
                            (file-file (concat (dir-list-to-path next-dir)
                                               "/" init-file)))
                       (if (file-exists-p file-file)
                           (dir-list-to-path current)
                         (try-find-best-root nil (cdr buffer-dir)
                                              next-dir))))
                    (t nil)))

            (let* ((buffer-dir (expand-file-name (file-name-directory (buffer-file-name buf))))
                   (vc-root-dir (vc-find-root buffer-dir repo-file)))
              (if (and init-file vc-root-dir)
                  (try-find-best-root
                   (make-dir-list (expand-file-name vc-root-dir))
                   (make-dir-list buffer-dir)
                   '())
                vc-root-dir))) ;; default to vc root if init file not given
        #+END_SRC


    - Call the next one on initialization
      #+BEGIN_SRC emacs-lisp
        (defun current-buffer-project-root ()
          (funcall jedi-config:find-root-function (current-buffer)
                   jedi-config:vcs-root-sentinel jedi-config:python-module-sentinel))
      #+END_SRC

    - Define a function to add options to the =jedi:server-args=
      #+BEGIN_SRC emacs-lisp
        (defun jedi-config:setup-server-args ()
          ;; little helper macro for building the arglist
          (defmacro add-args (arg-list arg-name arg-value)
            `(setq ,arg-list (append ,arg-list (list ,arg-name ,arg-value))))
          ;; and now define the args
          (let ((project-root (current-buffer-project-root)))

            (set (make-local-variable 'jedi:server-args) nil)

            (when project-root
              (message (format "Adding system path: %s" project-root))
              (set 'jedi:server-args (list "--sys-path" project-root))
              ;; (add-args jedi:server-args "--sys-path" project-root)
              )

            (when jedi-config:with-virtualenv
              (message (format "Adding virtualenv: %s" jedi-config:with-virtualenv))
              (add-args jedi:server-args "--virtual-env" jedi-config:with-virtualenv))))
      #+END_SRC

    - Define the python to run
      #+BEGIN_SRC emacs-lisp
        (defvar jedi-config:use-system-python t)
        (defun jedi-config:set-python-executable ()
          ; (set-exec-path-from-shell-PATH) ; Needed in MAC OS X
          (make-local-variable 'jedi:server-command)
          (set 'jedi:server-command
               (list (executable-find "python")
                     (cadr default-jedi-server-command))))
      #+END_SRC

    - Get the signature tooltip as soon as possible (do not work!)
      #+BEGIN_SRC emacs-lisp
        (setq jedi:get-in-function-call-delay 1000)
        (setq jedi:get-in-function-call-timeout 5000)
      #+END_SRC

*** Hooking the python-mode
    Apply necessary hooks to python. Remember that some of the hooks
    are already applied at the =prog-mode= level
    #+BEGIN_SRC emacs-lisp
      (add-hook 'python-mode-hook 'python-mode-config)
      (add-hook 'python-mode-hook 'jedi-config:setup-server-args)
      ;; Remove trailing whitespaces
      (add-hook 'python-mode-hook
                (lambda () (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
      ;; (when jedi-config:use-system-python
      ;;   (add-hook 'python-mode-hook 'jedi-config:set-python-executable))
      (setq jedi:complete-on-dot t)
    #+END_SRC

** Fortran 90
** C/C++
*** Install irony
    - [[https:github.com/Sarcasm/irony][irony]]
    - [[https://github.com/ikirill/irony-eldoc][irony-eldoc]]
    - [[https:github.com/Sarcasm/flycheck-irony][flycheck-irony]]
    - [[https:github.com/Sarcarms/company-iron][company-iron]]
    - company-irony-c-headers
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'irony 'company-irony 'flycheck-irony
                               'irony-eldoc 'company-irony-c-headers
                               'company-rtags 'flycheck-rtags)
   #+END_SRC

*** Installing Rtags support
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'rtags)
   #+END_SRC

*** Configure irony
     [[https://gist.github.com/soonhokong/7c2bf6e8b72dbc71c93b][start-here]] and [[http://syamajala.github.io/c-ide.html][here]]
**** Default configuration
    #+BEGIN_SRC emacs-lisp
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'objc-mode-hook 'irony-mode)

      ;; replace the `completion-at-point' and `complete-symbol' bindings in
      ;; irony-mode's buffers by irony-mode's function
      (defun my-irony-mode-hook ()
        (define-key irony-mode-map [remap completion-at-point]
          'irony-completion-at-point-async)
        (define-key irony-mode-map [remap complete-symbol]
          'irony-completion-at-point-async))
      (add-hook 'irony-mode-hook 'my-irony-mode-hook)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

      ;; Use irony-eldoc in irony-mode
      (add-hook 'irony-mode-hook 'irony-eldoc)
      ;; Use flycheck in irony-mode
      (eval-after-load 'flycheck
        '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
      ;; Use company backend with irony mode
      (require 'company-irony-c-headers)
      (eval-after-load 'company
        '(add-to-list
          'company-backends '(company-irony-c-headers company-irony))
        )
    #+END_SRC

**** Rtags configuration
     #+BEGIN_SRC emacs-lisp
       (ensure-package-installed 'company-rtags)
       (require 'rtags)
       (require 'company-rtags)

       (setq rtags-completions-enabled t)
       (eval-after-load 'company
         '(add-to-list
               'company-backends 'company-rtags))
       (setq rtags-autostart-diagnostics t)
       (rtags-enable-standard-keybindings)

       ;; Enable flycheck with rtags
       (require 'flycheck-rtags)
       (defun my-flycheck-rtags-setup ()
           (flycheck-select-checker 'rtags)
             (setq-local flycheck-highlighting-mode nil)
             ;; RTags creates more accurate overlays.
               (setq-local flycheck-check-syntax-automatically nil))
       ;; c-mode-common-hook is also called by c++-mode
       (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)

     #+END_SRC

**** cmake-ide
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'cmake-ide)
       (package-install 'cmake-ide))

     (cmake-ide-setup)
   #+END_SRC

   To have cmake-ide automatically create a compilation commands file
   in your project root create a .dir-locals.el containing the
   following:

   #+BEGIN_EXAMPLE
   ((nil . ((cmake-ide-build-dir . "<PATH_TO_PROJECT_BUILD_DIRECTORY>"))))
   #+END_EXAMPLE

   You can now build your project using M-x
   =cmake-ide-compile=. Additionally, cmake-ide will automatically
   update your RTags index as well.

** Julia
*** Automatic installation from melpa
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'julia-mode 'julia-shell)
    #+END_SRC

*** Load the mode with .jl files
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.js\\'" . julia-mode))
    #+END_SRC

** YAML format =YAML-mode=
   Major mode for yaml format.
   A small description can be found [[https://www.emacswiki.org/emacs/YamlMode][here]].

   Install the mode!
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'yaml-mode)
   #+END_SRC
   Use it with yaml files
   #+BEGIN_SRC emacs-lisp
     (add-hook 'yaml-mode-hook
               (lambda ()
                 (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
   #+END_SRC

* Editing customization
** Minor-modes to use in text-derived modes
   - =auto-fill-mode=
   - =flyspell-mode=
   #+BEGIN_SRC emacs-lisp
    (add-hook 'text-mode-hook 'auto-fill-mode)
;;    (add-hook 'text-mode-hook 'flyspell-mode)
   #+END_SRC

** Buffers and windows
   =*scratch*= buffer cannot be killed!
   #+BEGIN_SRC emacs-lisp
     ;; (ensure-package-installed 'protbuf)
     (require 'protbuf)
     (protect-buffer-from-kill-mode nil (get-buffer "*scratch*"))
   #+END_SRC

   Always kill the current buffer
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x k") 'myf/kill-current-buffer)
   #+END_SRC

** Markdown
   Associate =markdown-mode= with =.md= extension
   #+BEGIN_SRC emacs-lisp
     (myf/add-auto-mode 'markdown-mode "\\.md$")
   #+END_SRC

** Latex
   Install AUCTEX
   #+BEGIN_SRC emacs-lisp
     (ensure-package-installed 'auctex)
   #+END_SRC
   Active AUCTEX and REVTEX when using Latex.
   #+BEGIN_SRC emacs-lisp
     (require 'reftex)
     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
     (setq reftex-plug-into-AUCTeX t)
   #+END_SRC

** Personal customization
*** Fixing the mark commands in transient mark mode
    Taken from [[https://www.masteringemacs.org/article/fixing-mark-commands-transient-mark-mode][here]].
**** Set the mark
     #+BEGIN_SRC emacs-lisp
      (defun grhawk:push-mark-no-activate ()
        "Pushes `point' to `mark-ring' and does not activate the region.
         Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
        (interactive)
        (push-mark (point) t nil)
        (message "Pushed mark to ring"))

      (global-set-key (kbd "C-`") 'grhawk:push-mark-no-activate)
    #+END_SRC

**** Jump to mark
     #+BEGIN_SRC emacs-lisp
       (defun grhawk:jump-to-mark ()
         "Jumps to the local mark, respecting the `mark-ring` order.
          This is the same as using \\[set-mark-command] with the prefix argument."
         (interactive)
         (set-mark-command 1))

       (global-set-key (kbd "M-`") 'grhawk:jump-to-mark)
     #+END_SRC

**** Do not activate region when using C-x C-x
     #+BEGIN_SRC emacs-lisp
       (defun grhawk:exchange-point-and-mark-no-activate ()
         "Identical to \\[exchange-point-and-mark] but will not activate the region."
         (interactive)
         (exchange-point-and-mark)
         (deactivate-mark nil))

       (define-key global-map [remap exchange-point-and-mark]
         'grhawk:exchange-point-and-mark-no-activate)
     #+END_SRC

** Quantum Espresso emacs-mode
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.dotfiles/emacs.d/plugins/qe-modes/")
   #+END_SRC

* Miscellanea
** Copy & Paste
   Function that allow copy and paste through tmux
   #+BEGIN_SRC emacs-lisp
      (setq x-select-enable-clipboard t
         x-select-enable-primary t)
   #+END_SRC

** General keybindings
   #+BEGIN_SRC emacs-lisp
     (global-set-key [S-mouse-2] 'browse-url-at-mouse) ; Open the link on the browser
     (global-set-key (kbd "C-x C-b") 'ibuffer)         ; Replace buffer-list with ibuffer
     (global-set-key (kbd "C-c o") 'occur)             ; Bind to occur
     (global-set-key (kbd "M-I") 'imenu)               ; Bind to imenu
   #+END_SRC

** Key mapping
   [[https://github.com/Malabarba/smart-mode-line][This]] is a nice place that explain how to do key mapping. Pay
   attention that sometime it could be that the key are intercepted by
   tmux or by urxvt.
*** Mod + Arrows
    #+BEGIN_SRC emacs-lisp

          (define-key function-key-map "\033[1;3C" [M-right])
          (define-key function-key-map "\033[1;3D" [M-left])
          (define-key function-key-map "\033[1;3A" [M-up])
          (define-key function-key-map "\033[1;3B" [M-down])

          (define-key function-key-map "\033[1;2C" [S-right])
          (define-key function-key-map "\033[1;2D" [S-left])
          (define-key function-key-map "\033[1;2A" [S-up])
          (define-key function-key-map "\033[1;2B" [S-down])

          (define-key function-key-map "\033[1;4C" [S-M-right])
          (define-key function-key-map "\033[1;4D" [S-M-left])
          (define-key function-key-map "\033[1;4A" [S-M-up])
          (define-key function-key-map "\033[1;4B" [S-M-down])
          (define-key function-key-map "\033[1;5C" [C-right])

          (define-key function-key-map "\033[1;5D" [C-left])
          (define-key function-key-map "\033[1;5A" [C-up])
          (define-key function-key-map "\033[1;5B" [C-down])

          (define-key function-key-map "\033[1;7C" [C-M-right])
          (define-key function-key-map "\033[1;7D" [C-M-left])
          (define-key function-key-map "\033[1;7A" [C-M-up])
          (define-key function-key-map "\033[1;7B" [C-M-down])
    #+END_SRC

* Few Hints
** Compiling elisp
   It looks that compiled modules works much faster than clear ones.
   To compile a file use the folliwing snippet:

   =(byte-compile-file  "<name_of_file>")=

   or from shell:

   =emacs -batch -f batch-byte-compile *.el=
